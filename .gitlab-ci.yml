stages:
  - build
  - lint
  - release
  - deploy

variables:
  BUILD_STAGING: build-staging
  BUILD_PROD: build-prod
  STAGING_TAG: staging
  STABLE_TAG: latest

.build:
  stage: build
  services:
    - docker:dind
  script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$BUILD_TAG || true
    - docker-compose -f docker-compose.ci.yml build skatekrak-build
    - docker push $CI_REGISTRY_IMAGE:$BUILD_TAG

build_staging:
  extends: .build
  variables:
    BUILD_TAG: $BUILD_STAGING
  before_script:
    - source .env
  only:
    - develop

build_prod:
  extends: .build
  variables:
    BUILD_TAG: $BUILD_PROD
  only:
    - tags

.lint:
  stage: lint
  services:
    - docker:dind
  script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$BUILD_TAG
    - docker-compose -f docker-compose.ci.yml run --rm skatekrak-lint
  when: on_success

lint_staging:
  extends: .lint
  variables:
    BUILD_TAG: $BUILD_STAGING
  only:
    - develop

lint_prod:
  extends: .lint
  variables:
    BUILD_TAG: $BUILD_PROD
  only:
    - tags

.release:
  stage: release
  services:
    - docker:dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$BUILD_TAG
  when: on_success

release_staging:
  extends: .release
  variables:
    BUILD_TAG: $BUILD_STAGING
  script:
    - docker tag $CI_REGISTRY_IMAGE:$BUILD_TAG $CI_REGISTRY_IMAGE:$STAGING_TAG
    - docker push $CI_REGISTRY_IMAGE:$STAGING_TAG
  only:
    - develop

release_prod:
  extends: .release
  variables:
    BUILD_TAG: $BUILD_PROD
  script:
    - docker tag $CI_REGISTRY_IMAGE:$BUILD_TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker tag $CI_REGISTRY_IMAGE:$BUILD_TAG $CI_REGISTRY_IMAGE:$STABLE_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$STABLE_TAG
  only:
    - tags

.deploy:
  stage: deploy
  script:
    - |
      if kubectl set image deployment/skatekrak skatekrak=$CI_REGISTRY_IMAGE:$DEPLOY_TAG | grep -q updated; then
          echo "=> Deployment has set a new image, no need to force update"
      else
          echo "=> Patching Deployment to force update"
          kubectl patch deployment/skatekrak -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
      fi
    - kubectl rollout status deployment/skatekrak
    - kubectl describe deployment skatekrak

deploy_staging:
  extends: .deploy
  tags:
    - do-k8s-staging
  variables:
    DEPLOY_TAG: $STAGING_TAG
  environment:
    name: staging
    url: "https://home.staging.skatekrak.com"
  only:
    - develop
  when: on_success

deploy_prod:
  extends: .deploy
  tags:
    - do-k8s-prod
  variables:
    DEPLOY_TAG: $CI_COMMIT_TAG
  environment:
    name: production
    url: "https://skatekrak.com"
  only:
    - tags
  when: manual
